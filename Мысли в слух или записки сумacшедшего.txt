1. Если в слое сервисов мы захотим поменять источник данных на другой
например на стороннее api, файл, новый протокол то сможем ли мы это сделать релизовав интерфейс AbstractRepository?

Ответ: Нет. Рассмотрим пример: Есть функции: a) Сохранить меню на сервере б) Сохранить меню в файле на компе.
Эти функции реализуются в MenuServer и MenuFile. Пусть сохранение будет сложным процессом, и выбор места сохранения,
только один из этапов сохранения. Есть класс Saver, использующий репозитории(источники) в функции saveMenu
через saverConfig.LocationSaver.insert(), где LocationSaver = MenuServer() или MenuFile().
Однако по ошибке программист вместо нужного MenuServer() он положил в него MenuServer()
который на самом деле должен был быть DamagePriceListServer(), но класс не так назвли.
В итоге мы выбрали не тот источник данных
Т.к MenuServer и MenuServer(DamagePriceListServer) имеют одинаковый интерфейс,
то со стороны ide никаких подсветок не будет, и программист может долго искать в чем причина возникшей ошибки


2. Cможем ли мы гарантировать, что если мы возьмём 2 репозиторя c ОЖИДАЕМОЙ сущностью "Меню":
Один для работы с файлами, другой для работы с базой данных, то операции чтения/запись будут работать корректно?
При условии реализации AbstractRepository?

Из-за схожести интерфейса мы можем написать как menu_db.load_from(menu_file), так и menu_file.load_from(menu_db)
Но в menu_db лежит репозиторий с меню, а в menu_file репозиторий с Блюдами(Dishes).
Поэтому данные будут записавться из меню в блюда (Если не будет вызвана ошибка)
Т.к menu_db и menu_file имеют одинаковый интерфейс,
то со стороны ide никаких подсветок не будет, и программист может долго искать в чем причина возникшей ошибки

Из пункта 1 и 2 следует необходимость выделения интерфефйсов AbstractMenu и AbstractDish.




